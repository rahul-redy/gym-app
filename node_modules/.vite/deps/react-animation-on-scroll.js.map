{
  "version": 3,
  "sources": ["../../react-animation-on-scroll/src/components/AnimationOnScroll.tsx"],
  "sourcesContent": ["import React, {\n  useMemo,\n  useCallback,\n  useState,\n  useEffect,\n  useRef,\n} from 'react';\nimport throttle from 'lodash.throttle';\n\nconst animatedClass = 'animate__animated';\nconst serverSide = typeof window === 'undefined';\n\nlet scrollableParentRefInitialValue: any = undefined;\nif (!serverSide) {\n  scrollableParentRefInitialValue = window;\n}\n\ntype Props = {\n  offset?: number;\n  duration?: number;\n  style?: any;\n  className?: string;\n  initiallyVisible?: boolean;\n  animateIn?: string;\n  afterAnimatedIn?: any;\n  animateOut?: string;\n  delay?: number;\n  animatePreScroll?: boolean;\n  afterAnimatedOut?: any;\n  scrollableParentSelector?: string;\n  animateOnce?: boolean;\n  children?: any;\n};\n\ntype styleProp = {\n  animationDuration: string;\n  opacity?: number;\n};\n\nexport const AnimationOnScroll = ({\n  offset = 150,\n  duration = 1,\n  style: styleProps,\n  className: classNameProps,\n  initiallyVisible = false,\n  animateIn,\n  afterAnimatedIn,\n  animateOut,\n  delay = 0,\n  animatePreScroll = true,\n  afterAnimatedOut,\n  scrollableParentSelector,\n  animateOnce = false,\n  children,\n}: Props) => {\n  const [classes, setClasses] = useState(animatedClass);\n  const [style, setStyle] = useState<styleProp>({\n    animationDuration: `${duration}s`,\n    opacity: initiallyVisible ? 1 : 0,\n  });\n\n  const node: { current: any } = useRef(null);\n  const animating: { current: boolean } = useRef(false);\n  const visibilityRef: {\n    current: { onScreen: boolean; inViewport: boolean };\n  } = useRef({ onScreen: false, inViewport: false });\n\n  const delayedAnimationTORef: { current: any } = useRef(undefined);\n  const callbackTORef: { current: any } = useRef(undefined);\n  const scrollableParentRef: { current: any } = useRef(scrollableParentRefInitialValue);\n\n  const getElementTop = useCallback((elm: any) => {\n    let yPos = 0;\n    while (elm && elm.offsetTop !== undefined && elm.clientTop !== undefined) {\n      yPos += elm.offsetTop + elm.clientTop;\n      elm = elm.offsetParent;\n    }\n    return yPos;\n  }, []);\n\n  const getScrollPos = useCallback(() => {\n    if (scrollableParentRef.current.pageYOffset !== undefined) {\n      return scrollableParentRef.current.pageYOffset;\n    }\n    return scrollableParentRef.current.scrollTop;\n  }, [scrollableParentRef]);\n\n  const getScrollableParentHeight = useCallback(() => {\n    if (scrollableParentRef.current.innerHeight !== undefined) {\n      return scrollableParentRef.current.innerHeight;\n    }\n    return scrollableParentRef.current.clientHeight;\n  }, [scrollableParentRef]);\n\n  const getViewportTop = useCallback(() => {\n    return getScrollPos() + offset;\n  }, [offset, getScrollPos]);\n\n  const getViewportBottom = useCallback(() => {\n    return getScrollPos() + getScrollableParentHeight() - offset;\n  }, [offset, getScrollPos, getScrollableParentHeight]);\n\n  const isInViewport = useCallback(\n    (y) => {\n      return y >= getViewportTop() && y <= getViewportBottom();\n    },\n    [getViewportTop, getViewportBottom]\n  );\n\n  const isAboveViewport = useCallback(\n    (y) => {\n      return y < getViewportTop();\n    },\n    [getViewportTop]\n  );\n\n  const isBelowViewport = useCallback(\n    (y) => {\n      return y > getViewportBottom();\n    },\n    [getViewportBottom]\n  );\n\n  const inViewport = useCallback(\n    (elementTop, elementBottom) => {\n      return (\n        isInViewport(elementTop) ||\n        isInViewport(elementBottom) ||\n        (isAboveViewport(elementTop) && isBelowViewport(elementBottom))\n      );\n    },\n    [isInViewport, isAboveViewport, isBelowViewport]\n  );\n\n  const isAboveScreen = useCallback(\n    (y) => {\n      return y < getScrollPos();\n    },\n    [getScrollPos]\n  );\n\n  const isBelowScreen = useCallback(\n    (y) => {\n      return y > getScrollPos() + getScrollableParentHeight();\n    },\n    [getScrollPos, getScrollableParentHeight]\n  );\n\n  const onScreen = useCallback(\n    (elementTop, elementBottom) => {\n      return !isAboveScreen(elementBottom) && !isBelowScreen(elementTop);\n    },\n    [isAboveScreen, isBelowScreen]\n  );\n\n  const getVisibility = useCallback(() => {\n    const elementTop =\n      getElementTop(node.current) - getElementTop(scrollableParentRef.current);\n    const elementBottom = elementTop + node.current.clientHeight;\n\n    return {\n      inViewport: inViewport(elementTop, elementBottom),\n      onScreen: onScreen(elementTop, elementBottom),\n    };\n  }, [getElementTop, node, inViewport, onScreen, scrollableParentRef]);\n\n  const visibilityHasChanged = useCallback((previousVis, currentVis) => {\n    return (\n      previousVis.inViewport !== currentVis.inViewport ||\n      previousVis.onScreen !== currentVis.onScreen\n    );\n  }, []);\n\n  const animate = useCallback(\n    (animation, callback) => {\n      delayedAnimationTORef.current = setTimeout(() => {\n        animating.current = true;\n        setClasses(`${animatedClass} ${animation}`);\n        setStyle({ animationDuration: `${duration}s` });\n        callbackTORef.current = setTimeout(callback, duration * 1000);\n      }, delay);\n    },\n    [animating, delay, duration]\n  );\n\n  const animateInTrigger = useCallback(\n    (callback) => {\n      animate(animateIn, () => {\n        if (!animateOnce) {\n          setStyle({\n            animationDuration: `${duration}s`,\n            opacity: 1,\n          });\n          animating.current = false;\n        }\n        const vis = getVisibility();\n        if (callback) {\n          callback(vis);\n        }\n      });\n    },\n    [animating, animateIn, animateOnce, duration, animate, getVisibility]\n  );\n\n  const animateOutTrigger = useCallback(\n    (callback) => {\n      animate(animateOut, () => {\n        setClasses(animatedClass);\n        setStyle({ animationDuration: `${duration}s`, opacity: 0 });\n        const vis = getVisibility();\n\n        if (vis.inViewport && animateIn) {\n          animateInTrigger(afterAnimatedIn);\n        } else {\n          animating.current = false;\n        }\n\n        if (callback) {\n          callback(vis);\n        }\n      });\n    },\n    [\n      animating,\n      animate,\n      animateIn,\n      duration,\n      afterAnimatedIn,\n      animateInTrigger,\n      animateOut,\n      getVisibility,\n    ]\n  );\n\n  const handleScroll = useCallback(() => {\n    if (!animating.current) {\n      const { current: visibility } = visibilityRef;\n      const currentVis = getVisibility();\n      if (visibilityHasChanged(visibility, currentVis)) {\n        clearTimeout(delayedAnimationTORef.current);\n        if (!currentVis.onScreen) {\n          setClasses(animatedClass);\n          setStyle({\n            animationDuration: `${duration}s`,\n            opacity: initiallyVisible ? 1 : 0,\n          });\n        } else if (currentVis.inViewport && animateIn) {\n          animateInTrigger(afterAnimatedIn);\n        } else if (\n          currentVis.onScreen &&\n          visibility.inViewport &&\n          animateOut &&\n          node.current.style.opacity === '1'\n        ) {\n          animateOutTrigger(afterAnimatedOut);\n        }\n        visibilityRef.current = currentVis;\n      }\n    }\n  }, [\n    afterAnimatedIn,\n    afterAnimatedOut,\n    animateIn,\n    animateInTrigger,\n    animateOut,\n    duration,\n    initiallyVisible,\n    visibilityHasChanged,\n    animateOutTrigger,\n    getVisibility,\n  ]);\n\n  const listener = useMemo(\n    () =>\n      throttle(() => {\n        handleScroll();\n      }, 50),\n    [handleScroll]\n  );\n\n  useEffect(() => {\n    if (!serverSide) {\n      const parentSelector = scrollableParentSelector;\n      scrollableParentRef.current = parentSelector\n        ? document.querySelector(parentSelector)\n        : window;\n      if (\n        scrollableParentRef.current &&\n        scrollableParentRef.current.addEventListener\n      ) {\n        scrollableParentRef.current.addEventListener('scroll', listener);\n      } else {\n        console.warn(\n          `Cannot find element by locator: ${scrollableParentSelector}`\n        );\n      }\n      if (animatePreScroll) {\n        handleScroll();\n      }\n\n      return () => {\n        clearTimeout(delayedAnimationTORef.current);\n        clearTimeout(callbackTORef.current);\n        if (window && window.removeEventListener) {\n          window.removeEventListener('scroll', listener);\n        }\n      };\n    }\n  }, [\n    handleScroll,\n    scrollableParentSelector,\n    scrollableParentRef,\n    listener,\n    animatePreScroll,\n  ]);\n\n  return (\n    <div\n      ref={node}\n      className={classNameProps ? `${classNameProps} ${classes}` : classes}\n      style={Object.assign({}, style, styleProps)}\n    >\n      {children}\n    </div>\n  );\n};\n"],
  "mappings": "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",
  "names": ["animatedClass", "serverSide", "window", "scrollableParentRefInitialValue", "undefined", "AnimationOnScroll", "offset", "duration", "style", "styleProps", "className", "classNameProps", "initiallyVisible", "animateIn", "afterAnimatedIn", "animateOut", "delay", "animatePreScroll", "afterAnimatedOut", "scrollableParentSelector", "animateOnce", "children", "classes", "setClasses", "useState", "setStyle", "animationDuration", "opacity", "node", "useRef", "animating", "visibilityRef", "onScreen", "inViewport", "delayedAnimationTORef", "callbackTORef", "scrollableParentRef", "getElementTop", "useCallback", "elm", "yPos", "offsetTop", "clientTop", "offsetParent", "getScrollPos", "current", "pageYOffset", "scrollTop", "getScrollableParentHeight", "innerHeight", "clientHeight", "getViewportTop", "getViewportBottom", "isInViewport", "y", "isAboveViewport", "isBelowViewport", "elementTop", "elementBottom", "isAboveScreen", "isBelowScreen", "getVisibility", "visibilityHasChanged", "previousVis", "currentVis", "animate", "animation", "callback", "setTimeout", "animateInTrigger", "vis", "animateOutTrigger", "handleScroll", "visibility", "clearTimeout", "listener", "useMemo", "throttle", "useEffect", "parentSelector", "document", "querySelector", "addEventListener", "console", "warn", "removeEventListener", "React", "Object", "assign"]
}
